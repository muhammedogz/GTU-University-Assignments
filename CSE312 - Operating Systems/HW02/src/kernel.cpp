
#include <common/types.h>
#include <gdt.h>
#include <hardwarecommunication/interrupts.h>
#include <hardwarecommunication/pci.h>
#include <drivers/driver.h>
#include <drivers/keyboard.h>
#include <drivers/mouse.h>
#include <drivers/vga.h>
#include <gui/desktop.h>
#include <gui/window.h>
#include <multitasking.h>
#include <multithread.h>
#include <pagereplacement.h>

// #define GRAPHICSMODE

using namespace myos;
using namespace myos::common;
using namespace myos::drivers;
using namespace myos::hardwarecommunication;
using namespace myos::gui;

void printf(char *str)
{
  static uint16_t *VideoMemory = (uint16_t *)0xb8000;

  static uint8_t x = 0, y = 0;

  for (int i = 0; str[i] != '\0'; ++i)
  {
    switch (str[i])
    {
    case '\n':
      x = 0;
      y++;
      break;
    default:
      VideoMemory[80 * y + x] = (VideoMemory[80 * y + x] & 0xFF00) | str[i];
      x++;
      break;
    }

    if (x >= 80)
    {
      x = 0;
      y++;
    }

    if (y >= 25)
    {
      for (y = 0; y < 25; y++)
        for (x = 0; x < 80; x++)
          VideoMemory[80 * y + x] = (VideoMemory[80 * y + x] & 0xFF00) | ' ';
      x = 0;
      y = 0;
    }
  }
}

void printInteger(int a)
{
  char str[10];
  int i = 0;
  while (a > 0)
  {
    str[i] = a % 10 + '0';
    a /= 10;
    i++;
  }
  str[i] = '\0';
  printf(str);
}

void printfHex(uint8_t key)
{
  char *foo = "00";
  char *hex = "0123456789ABCDEF";
  foo[0] = hex[(key >> 4) & 0xF];
  foo[1] = hex[key & 0xF];
  printf(foo);
}

ThreadManager threadManager;

void yieldHelper(int id)
{
  if (threadManager.yieldModeOpen == true && threadManager.yieldedThread == id)
  {
    while (threadManager.yieldModeOpen == true)
    {
    };
  }
}

int turn;
int flag[2];

void petersonsEnter(int id)
{
  int otherId = id == 0 ? 1 : 0;
  flag[id] = true;
  turn = id;
  while (turn == id && flag[otherId] == true)
    ;
}

void petersonsLeave(int id)
{
  flag[id] = false;
}

void taskA()
{
  while (true)
  {
    yieldHelper(0);
    printf("Task ----------------------------- A --------------\n");
  }
}

void taskB()
{
  while (true)
  {
    yieldHelper(1);
    printf("Task +++++++++++++++ B +++++++++++++++\n");
  }
}

int fish = 0; // this is my product

void producer()
{
  while (true)
  {
    if (fish < 1000000)
      petersonsEnter(0);

    // printf("Producer -----------------------------\n");
    fish++;

    if (fish > 1000000)
    {
      printf("Producer: fish > 1000000\n");
      petersonsLeave(0);
    }
  }
}

void consumer()
{
  while (true)
  {
    if (fish > 0)
      petersonsEnter(1);

    // printf("Consumer -----------------------------\n");
    fish--;

    if (fish < 0)
    {
      printf("Consumer: fish < 0\n");
      petersonsLeave(1);
    }
  }
}

int bubbleSort(int arr[], int n)
{
  int sortTime = 0;
  for (int i = 0; i < n - 1; i++)
  {
    for (int j = 0; j < n - i - 1; j++)
    {
      sortTime++;
      if (arr[j] > arr[j + 1])
      {
        // swap arr[j+1] and arr[j]
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }

  return sortTime;
}

int insertionSort(int arr[], int n)
{
  int sortTime = 0;
  for (int i = 1; i < n; i++)
  {
    int key = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j] > key)
    {
      sortTime++;
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    arr[j + 1] = key;
  }

  return sortTime;
}

int partition(int arr[], int low, int high, int *sortTime)
{
  int pivot = arr[high];
  int i = low - 1;
  for (int j = low; j <= high - 1; j++)
  {
    (*sortTime)++;
    if (arr[j] <= pivot)
    {
      i++;
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    }
  }
  int temp = arr[i + 1];
  arr[i + 1] = arr[high];
  arr[high] = temp;
  return i + 1;
}
int quickSortHelper(int arr[], int low, int high)
{
  int sortTime = 0;
  if (low < high)
  {
    int pi = partition(arr, low, high, &sortTime);
    sortTime += quickSortHelper(arr, low, pi - 1);
    sortTime += quickSortHelper(arr, pi + 1, high);
  }

  return sortTime;
}

int quickSort(int arr[], int n)
{
  return quickSortHelper(arr, 0, n - 1);
}

int randomValues[3000] = {130, 298, 538, 457, 866, 526, 173, 540, 575, 502, 267, 897, 842, 714, 565, 844, 344, 25, 246, 589, 225, 379, 571, 162, 5, 412, 593, 300, 518, 3, 17, 630, 242, 14, 241, 501, 354, 124, 36, 364, 408, 772, 653, 264, 483, 105, 593, 830, 505, 364, 538, 569, 659, 416, 257, 312, 225, 408, 621, 374, 634, 595, 373, 285, 250, 350, 819, 321, 872, 550, 359, 360, 427, 457, 696, 170, 322, 604, 837, 4, 876, 116, 776, 753, 507, 274, 435, 64, 245, 331, 627, 12, 24, 347, 787, 213, 542, 382, 144, 819, 536, 692, 33, 99, 692, 658, 197, 791, 664, 749, 749, 695, 578, 161, 486, 351, 366, 602, 607, 73, 214, 483, 304, 445, 259, 27, 715, 160, 627, 130, 793, 478, 722, 183, 541, 515, 847, 121, 782, 894, 570, 645, 729, 346, 262, 353, 379, 775, 362, 444, 50, 178, 570, 413, 164, 789, 845, 246, 156, 192, 367, 739, 634, 841, 284, 60, 160, 156, 608, 130, 695, 503, 770, 74, 805, 496, 678, 201, 712, 474, 682, 75, 435, 61, 685, 264, 288, 699, 63, 651, 170, 21, 632, 727, 793, 819, 151, 147, 130, 85, 514, 726, 128, 58, 218, 436, 590, 512, 591, 679, 895, 507, 493, 85, 625, 241, 773, 510, 854, 521, 52, 445, 41, 874, 850, 549, 641, 528, 620, 175, 796, 617, 749, 509, 142, 779, 121, 202, 288, 506, 273, 562, 468, 664, 776, 899, 285, 633, 289, 439, 599, 502, 263, 651, 310, 46, 817, 481, 246, 610, 50, 819, 51, 595, 647, 849, 362, 287, 285, 640, 515, 799, 460, 204, 149, 663, 293, 435, 865, 349, 57, 521, 5, 428, 528, 834, 430, 789, 74, 92, 705, 880, 242, 543, 331, 450, 376, 153, 378, 418, 330, 323, 507, 205, 227, 545, 240, 76, 577, 295, 813, 7, 802, 237, 760, 213, 649, 810, 876, 309, 872, 379, 805, 40, 648, 542, 810, 12, 608, 768, 437, 58, 469, 340, 223, 715, 134, 348, 648, 466, 301, 538, 599, 253, 460, 18, 170, 100, 526, 164, 865, 93, 788, 866, 69, 395, 752, 797, 893, 758, 214, 164, 58, 183, 16, 334, 695, 456, 447, 370, 476, 355, 539, 728, 501, 392, 750, 598, 737, 241, 862, 194, 823, 198, 88, 650, 887, 474, 133, 404, 796, 592, 710, 385, 790, 320, 162, 466, 640, 850, 630, 153, 665, 450, 518, 473, 639, 349, 718, 829, 830, 713, 339, 14, 544, 777, 362, 162, 651, 341, 552, 732, 54, 896, 354, 435, 45, 613, 484, 615, 263, 604, 312, 242, 431, 320, 36, 509, 628, 762, 43, 396, 890, 405, 300, 804, 794, 813, 539, 105, 879, 650, 460, 88, 417, 536, 608, 391, 744, 459, 643, 416, 87, 341, 500, 472, 529, 314, 154, 664, 377, 843, 291, 119, 815, 558, 46, 697, 621, 669, 780, 550, 827, 91, 99, 820, 568, 170, 102, 630, 675, 131, 239, 18, 55, 667, 609, 54, 887, 378, 174, 53, 154, 106, 20, 230, 594, 138, 646, 559, 586, 136, 350, 666, 645, 79, 892, 442, 97, 538, 386, 187, 143, 316, 113, 119, 97, 591, 472, 640, 689, 107, 133, 642, 356, 588, 55, 204, 829, 893, 844, 697, 885, 602, 5, 398, 617, 586, 654, 742, 237, 571, 0, 654, 465, 243, 451, 770, 361, 883, 133, 497, 683, 696, 172, 1, 818, 718, 16, 468, 590, 505, 745, 201, 818, 649, 310, 810, 192, 456, 63, 33, 514, 326, 881, 300, 809, 242, 58, 256, 689, 401, 730, 683, 423, 681, 526, 439, 623, 219, 143, 196, 685, 439, 696, 524, 446, 280, 397, 847, 248, 297, 740, 702, 192, 848, 145, 494, 515, 216, 6, 680, 455, 712, 308, 38, 179, 505, 223, 548, 411, 701, 623, 463, 154, 238, 88, 397, 466, 72, 395, 251, 134, 830, 350, 473, 225, 607, 883, 293, 611, 347, 309, 370, 450, 40, 793, 245, 176, 382, 540, 682, 536, 9, 365, 874, 477, 5, 386, 359, 369, 6, 733, 92, 747, 863, 312, 735, 578, 806, 862, 198, 537, 277, 304, 221, 166, 661, 235, 703, 582, 208, 848, 243, 67, 479, 215, 547, 382, 871, 650, 216, 332, 303, 277, 685, 183, 832, 572, 861, 660, 480, 751, 892, 599, 726, 121, 780, 244, 51, 568, 294, 673, 131, 433, 300, 183, 65, 276, 886, 570, 241, 811, 842, 798, 420, 479, 565, 51, 725, 376, 567, 594, 291, 244, 279, 740, 78, 409, 816, 128, 611, 766, 804, 665, 541, 173, 70, 502, 0, 531, 373, 188, 178, 443, 720, 51, 724, 214, 208, 550, 359, 582, 799, 93, 168, 395, 42, 236, 491, 551, 676, 309, 119, 449, 146, 659, 24, 205, 539, 2, 645, 139, 707, 166, 306, 874, 400, 503, 392, 320, 316, 545, 398, 189, 866, 163, 552, 356, 475, 544, 574, 839, 186, 551, 126, 150, 501, 284, 443, 167, 870, 564, 677, 326, 408, 54, 358, 554, 396, 653, 500, 276, 2, 665, 582, 827, 837, 550, 622, 851, 191, 114, 678, 880, 59, 545, 396, 302, 874, 760, 96, 337, 834, 125, 655, 195, 279, 314, 427, 585, 727, 444, 84, 623, 633, 470, 252, 290, 647, 545, 690, 478, 777, 424, 300, 687, 460, 123, 816, 717, 408, 680, 620, 833, 281, 270, 796, 768, 145, 685, 359, 616, 405, 727, 484, 878, 580, 165, 837, 818, 598, 383, 246, 201, 176, 439, 770, 143, 1, 518, 22, 333, 722, 399, 467, 717, 206, 87, 856, 324, 528, 273, 146, 378, 145, 390, 425, 866, 450, 593, 273, 777, 199, 297, 170, 639, 95, 334, 686, 402, 639, 386, 537, 798, 889, 183, 880, 54, 317, 656, 870, 26, 848, 781, 227, 887, 464, 260, 758, 13, 180, 709, 448, 408, 26, 843, 298, 377, 539, 707, 224, 29, 15, 585, 566, 208, 349, 35, 270, 188, 365, 306, 440, 444, 191, 246, 408, 455, 649, 810, 224, 299, 734, 79, 580, 482, 412, 680, 616, 709, 836, 564, 684, 885, 291, 38, 474, 399, 449, 670, 90, 51, 871, 169, 827, 796, 232, 717, 571, 314, 568, 224, 844, 518, 533, 900, 559, 365, 28, 849, 324, 735, 717, 341, 428, 823, 767, 31, 96, 799, 250, 858, 576, 860, 887, 39, 395, 564, 135, 129, 519, 436, 864, 492, 77, 153, 533, 525, 496, 147, 880, 229, 326, 422, 841, 841, 687, 284, 403, 536, 511, 589, 367, 582, 155, 213, 673, 106, 640, 868, 69, 767, 894, 863, 470, 296, 265, 546, 795, 102, 332, 2, 467, 801, 850, 691, 396, 231, 684, 727, 516, 584, 693, 542, 145, 366, 862, 341, 19, 771, 265, 571, 43, 243, 329, 260, 389, 132, 178, 496, 568, 130, 529, 94, 508, 802, 618, 243, 113, 648, 144, 30, 825, 501, 128, 318, 137, 307, 38, 625, 480, 681, 827, 880, 852, 420, 502, 524, 285, 40, 52, 206, 863, 434, 251, 426, 420, 594, 240, 839, 819, 169, 382, 537, 356, 818, 347, 884, 795, 448, 142, 351, 362, 200, 177, 647, 874, 686, 373, 87, 579, 843, 725, 518, 770, 864, 475, 842, 385, 536, 188, 214, 19, 701, 790, 21, 434, 673, 310, 673, 464, 228, 477, 178, 482, 75, 89, 320, 807, 887, 121, 177, 62, 45, 441, 472, 148, 642, 255, 296, 724, 221, 849, 423, 38, 455, 285, 8, 517, 775, 147, 107, 621, 322, 836, 840, 660, 856, 187, 658, 730, 760, 266, 750, 428, 53, 105, 42, 749, 234, 13, 110, 122, 815, 666, 238, 126, 47, 440, 103, 364, 247, 749, 648, 514, 304, 673, 653, 227, 736, 417, 113, 251, 824, 110, 764, 548, 503, 220, 779, 215, 546, 337, 345, 786, 168, 753, 790, 741, 64, 542, 624, 834, 197, 792, 487, 97, 88, 434, 528, 427, 402, 826, 134, 836, 692, 98, 508, 56, 632, 98, 877, 610, 897, 248, 830, 254, 84, 605, 572, 105, 393, 577, 786, 200, 173, 49, 186, 7, 508, 761, 676, 320, 633, 199, 225, 267, 866, 740, 547, 804, 836, 719, 685, 198, 593, 70, 535, 167, 254, 454, 591, 711, 239, 220, 564, 833, 447, 680, 202, 361, 650, 312, 121, 270, 703, 313, 858, 527, 579, 662, 431, 70, 138, 110, 475, 374, 695, 41, 663, 287, 887, 888, 459, 820, 234, 434, 510, 357, 663, 825, 403, 83, 496, 448, 778, 298, 413, 176, 427, 781, 706, 3, 824, 411, 830, 740, 285, 211, 474, 742, 118, 795, 361, 539, 225, 471, 524, 79, 457, 375, 15, 360, 270, 858, 384, 759, 122, 275, 514, 891, 271, 269, 346, 249, 735, 389, 331, 115, 107, 261, 82, 275, 524, 303, 460, 642, 453, 330, 657, 357, 88, 174, 97, 182, 48, 767, 448, 77, 74, 567, 476, 789, 92, 246, 803, 604, 398, 618, 855, 279, 657, 352, 55, 377, 662, 80, 558, 851, 245, 331, 383, 60, 194, 240, 227, 538, 615, 861, 507, 423, 133, 816, 631, 844, 677, 163, 714, 105, 79, 593, 206, 45, 696, 120, 217, 679, 630, 785, 495, 448, 664, 813, 143, 605, 781, 142, 631, 199, 769, 652, 695, 242, 91, 794, 510, 122, 42, 268, 556, 841, 476, 319, 870, 798, 706, 27, 23, 69, 379, 611, 11, 81, 568, 455, 4, 100, 838, 720, 366, 859, 584, 218, 702, 833, 140, 739, 415, 558, 606, 807, 356, 197, 27, 489, 629, 510, 323, 43, 121, 821, 456, 260, 493, 316, 804, 417, 731, 743, 11, 843, 712, 847, 786, 799, 524, 836, 693, 595, 600, 323, 721, 899, 53, 79, 762, 495, 90, 522, 896, 56, 100, 559, 571, 167, 377, 230, 537, 68, 385, 235, 312, 229, 859, 492, 811, 561, 384, 293, 776, 123, 607, 208, 5, 131, 56, 688, 351, 373, 804, 474, 143, 569, 33, 118, 162, 665, 281, 364, 331, 69, 799, 895, 335, 862, 761, 866, 120, 366, 840, 456, 636, 798, 156, 697, 809, 183, 715, 35, 455, 411, 28, 864, 267, 773, 860, 576, 588, 784, 574, 865, 592, 558, 719, 395, 783, 444, 48, 17, 79, 763, 667, 476, 105, 701, 659, 143, 700, 853, 758, 658, 339, 316, 603, 163, 603, 30, 865, 201, 793, 817, 338, 59, 315, 374, 552, 610, 307, 376, 511, 618, 793, 819, 192, 759, 178, 870, 591, 441, 509, 141, 2, 745, 853, 541, 137, 238, 248, 657, 187, 285, 292, 893, 831, 275, 874, 548, 559, 239, 544, 174, 457, 392, 343, 282, 429, 680, 63, 200, 801, 610, 787, 470, 257, 680, 192, 80, 431, 539, 728, 834, 844, 50, 546, 882, 614, 649, 249, 485, 346, 173, 892, 593, 768, 447, 854, 601, 688, 426, 154, 631, 183, 47, 60, 443, 477, 495, 275, 819, 733, 446, 446, 641, 188, 213, 235, 371, 171, 214, 314, 564, 827, 605, 687, 53, 881, 487, 391, 715, 203, 732, 788, 22, 621, 847, 290, 18, 597, 99, 583, 106, 203, 339, 88, 562, 763, 330, 575, 200, 756, 642, 268, 416, 535, 551, 613, 283, 306, 891, 312, 225, 883, 635, 192, 310, 18, 320, 136, 677, 328, 709, 67, 269, 494, 409, 342, 774, 280, 151, 223, 483, 70, 376, 220, 768, 53, 34, 670, 221, 572, 174, 777, 507, 751, 128, 591, 240, 863, 83, 404, 877, 755, 747, 191, 274, 402, 168, 774, 61, 598, 358, 612, 818, 574, 425, 449, 90, 803, 52, 296, 634, 162, 883, 360, 497, 350, 738, 51, 559, 819, 788, 859, 397, 356, 482, 769, 365, 801, 149, 184, 347, 807, 106, 861, 258, 405, 352, 427, 570, 113, 814, 853, 579, 193, 747, 556, 16, 576, 352, 462, 771, 70, 588, 321, 17, 457, 237, 269, 270, 3, 241, 230, 887, 557, 634, 686, 736, 439, 885, 15, 353, 336, 477, 134, 191, 538, 891, 43, 603, 375, 465, 534, 470, 277, 142, 305, 463, 346, 134, 98, 66, 12, 218, 610, 765, 72, 656, 557, 289, 230, 650, 493, 660, 331, 857, 535, 400, 274, 892, 181, 854, 763, 145, 37, 822, 382, 390, 799, 155, 170, 135, 845, 202, 394, 210, 464, 801, 594, 327, 38, 220, 714, 250, 98, 334, 547, 627, 111, 751, 519, 600, 98, 560, 179, 293, 813, 139, 433, 325, 233, 626, 172, 115, 552, 280, 5, 110, 303, 241, 73, 124, 686, 298, 771, 617, 90, 470, 24, 831, 13, 686, 509, 175, 441, 429, 33, 2, 4, 121, 710, 683, 10, 554, 205, 282, 590, 174, 74, 156, 747, 709, 377, 529, 28, 160, 598, 574, 837, 713, 200, 227, 542, 222, 463, 728, 793, 736, 791, 895, 480, 354, 700, 184, 483, 695, 83, 866, 369, 316, 782, 392, 188, 42, 68, 276, 674, 136, 128, 269, 533, 264, 123, 190, 615, 458, 108, 501, 560, 736, 434, 464, 142, 528, 782, 236, 719, 769, 780, 637, 897, 570, 807, 853, 664, 338, 419, 436, 211, 169, 833, 553, 26, 351, 378, 753, 223, 562, 838, 83, 56, 551, 659, 665, 31, 20, 829, 665, 139, 586, 819, 56, 702, 535, 6, 685, 102, 738, 443, 856, 563, 180, 130, 887, 854, 518, 689, 735, 849, 878, 750, 809, 269, 547, 627, 25, 895, 594, 242, 464, 321, 234, 273, 156, 821, 554, 271, 655, 702, 662, 731, 890, 70, 714, 668, 792, 826, 803, 466, 329, 733, 281, 540, 64, 503, 525, 640, 645, 632, 592, 219, 303, 456, 751, 210, 535, 4, 835, 17, 218, 58, 765, 185, 68, 631, 830, 369, 860, 891, 756, 427, 853, 841, 800, 897, 628, 126, 302, 798, 806, 211, 668, 752, 617, 854, 732, 99, 576, 341, 526, 72, 886, 187, 132, 304, 861, 6, 214, 236, 857, 131, 502, 586, 591, 526, 139, 612, 295, 847, 179, 117, 339, 107, 386, 896, 289, 686, 750, 141, 394, 470, 718, 189, 249, 147, 841, 595, 803, 130, 578, 874, 698, 524, 280, 533, 73, 127, 265, 848, 838, 193, 234, 559, 43, 183, 541, 428, 600, 810, 839, 762, 397, 610, 657, 771, 456, 688, 362, 814, 142, 688, 115, 552, 689, 92, 164, 632, 160, 880, 99, 167, 205, 323, 856, 828, 488, 568, 217, 723, 501, 218, 778, 128, 749, 17, 80, 254, 328, 289, 113, 848, 752, 621, 636, 444, 83, 806, 849, 763, 555, 762, 171, 565, 381, 402, 185, 371, 467, 876, 669, 109, 824, 356, 510, 449, 144, 613, 419, 455, 58, 655, 372, 459, 662, 399, 413, 500, 414, 320, 418, 172, 185, 702, 289, 631, 307, 148, 301, 728, 442, 385, 170, 482, 246, 464, 108, 542, 777, 317, 775, 805, 335, 82, 276, 804, 210, 365, 894, 202, 305, 514, 429, 579, 212, 354, 373, 683, 24, 214, 820, 246, 611, 704, 337, 84, 462, 338, 759, 375, 257, 833, 623, 670, 506, 122, 451, 508, 530, 495, 765, 769, 20, 873, 702, 763, 174, 202, 779, 80, 426, 517, 227, 247, 337, 101, 752, 216, 168, 701, 347, 296, 783, 616, 155, 173, 463, 748, 585, 325, 7, 207, 326, 441, 749, 228, 439, 441, 497, 649, 465, 858, 431, 59, 240, 888, 517, 154, 365, 105, 136, 312, 581, 493, 179, 364, 559, 382, 368, 806, 365, 585, 243, 776, 454, 761, 878, 160, 677, 300, 67, 645, 92, 752, 821, 281, 97, 230, 110, 118, 283, 442, 814, 228, 384, 45, 513, 685, 125, 492, 829, 668, 831, 607, 519, 876, 481, 837, 768, 132, 48, 165, 567, 104, 66, 802, 369, 741, 273, 232, 458, 513, 549, 374, 698, 78, 493, 35, 448, 133, 408, 668, 400, 866, 505, 470, 639, 160, 729, 41, 342, 213, 514, 410, 624, 870, 747, 352, 686, 131, 85, 8, 663, 224, 425, 678, 574, 26, 807, 574, 506, 376, 432, 477, 613, 93, 255, 810, 272, 849, 128, 869, 596, 207, 883, 540, 388, 81, 151, 425, 897, 24, 108, 89, 59, 569, 497, 862, 735, 308, 850, 7, 241, 707, 301, 476, 568, 768, 466, 894, 505, 162, 98, 504, 872, 68, 417, 771, 510, 477, 486, 704, 734, 194, 424, 882, 78, 446, 464, 508, 97, 536, 593, 368, 714, 357, 529, 675, 666, 873, 586, 515, 598, 351, 813, 23, 142, 868, 685, 106, 160, 258, 678, 127, 275, 293, 347, 147, 853, 33, 169, 767, 36, 454, 428, 823, 424, 95, 12, 407, 704, 428, 672, 802, 375, 152, 251, 869, 500, 99, 662, 664, 722, 103, 17, 1, 407, 16, 865, 242, 516, 51, 10, 607, 695, 424, 263, 737, 116, 144, 560, 145, 133, 108, 564, 357, 507, 797, 543, 134, 776, 730, 156, 531, 289, 766, 791, 322, 591, 389, 851, 242, 21, 599, 771, 266, 860, 587, 142, 26, 659, 29, 504, 201, 691, 280, 687, 296, 792, 258, 509, 406, 410, 572, 805, 485, 317, 198, 648, 844, 715, 629, 645, 95, 295, 299, 155, 756, 49, 843, 526, 556, 573, 28, 394, 160, 64, 154, 250, 259, 442, 897, 516, 716, 251, 385, 141, 617, 101, 450, 872, 53, 244, 135, 326, 457, 571, 842, 456, 442, 284, 811, 494, 600, 860, 49, 538, 608, 577, 271, 737, 693, 703, 256, 310, 76, 13, 315, 369, 517, 391, 78, 43, 605, 412, 641, 110, 231, 232, 851, 329, 579, 460, 681, 803, 635, 133, 388, 339, 158, 483, 263, 295, 834, 667, 690, 578, 553, 837, 68, 507, 317, 756, 382, 139, 866, 456, 710, 338, 416, 251, 723, 668, 747, 364, 850, 286, 747, 683, 10, 67, 693, 124, 332, 97, 95, 437, 496, 267, 723, 177, 95, 312, 73, 867, 810, 277, 612, 151, 538, 712, 781, 358, 421, 55, 631, 885, 416, 478, 623, 506, 101, 425, 288, 810, 415, 882, 553, 277, 355, 498, 704, 879, 603, 806, 163, 374, 650, 386, 296, 758, 363, 842, 666, 594, 418, 729, 452, 444, 487, 663, 345, 497, 234, 370, 165, 30, 820, 266, 545, 845, 888, 400, 76, 333, 743, 543, 235, 87, 63, 807, 511, 543, 617, 324, 739, 107, 559, 673, 157, 183};

PageReplacement page;

class PrintfKeyboardEventHandler : public KeyboardEventHandler
{
public:
  void OnKeyDown(char c)
  {
    char *inputBuffer = " ";
    inputBuffer[0] = c;

    if (inputBuffer[0] == '1')
    {
      printf("\nFIFO Results\n");
      page.fifo.run(randomValues, 500, bubbleSort, "\nBubble Sort result");
      page.fifo.run(randomValues, 500, insertionSort, "\nInsertion Sort result");
      page.fifo.run(randomValues, 500, quickSort, "\nQuick Sort result");
    }
    else if (inputBuffer[0] == '2')
    {
      printf("\nSecond Chance\n");
      // page.secondChance.run(randomValues, 500, bubbleSort, "\nBubble Sort result");
      // page.secondChance.run(randomValues, 500, insertionSort, "\nInsertion Sort result");
      // page.secondChance.run(randomValues, 500, quickSort, "\nQuick Sort result");
    }
    else if (inputBuffer[0] == '3')
    {
      printf("\nLRU\n");
      // page.lru.run(randomValues, 500, bubbleSort, "\nBubble Sort result");
      // page.lru.run(randomValues, 500, insertionSort, "\nInsertion Sort result");
      // page.lru.run(randomValues, 500, quickSort, "\nQuick Sort result");
    }
  }
};

class MouseToConsole : public MouseEventHandler
{
  int8_t x, y;

public:
  MouseToConsole()
  {
    uint16_t *VideoMemory = (uint16_t *)0xb8000;
    x = 40;
    y = 12;
    VideoMemory[80 * y + x] = (VideoMemory[80 * y + x] & 0x0F00) << 4 | (VideoMemory[80 * y + x] & 0xF000) >> 4 | (VideoMemory[80 * y + x] & 0x00FF);
  }

  virtual void OnMouseMove(int xoffset, int yoffset)
  {
    static uint16_t *VideoMemory = (uint16_t *)0xb8000;
    VideoMemory[80 * y + x] = (VideoMemory[80 * y + x] & 0x0F00) << 4 | (VideoMemory[80 * y + x] & 0xF000) >> 4 | (VideoMemory[80 * y + x] & 0x00FF);

    x += xoffset;
    if (x >= 80)
      x = 79;
    if (x < 0)
      x = 0;
    y += yoffset;
    if (y >= 25)
      y = 24;
    if (y < 0)
      y = 0;

    VideoMemory[80 * y + x] = (VideoMemory[80 * y + x] & 0x0F00) << 4 | (VideoMemory[80 * y + x] & 0xF000) >> 4 | (VideoMemory[80 * y + x] & 0x00FF);
  }
};

typedef void (*constructor)();
extern "C" constructor start_ctors;
extern "C" constructor end_ctors;
extern "C" void callConstructors()
{
  for (constructor *i = &start_ctors; i != &end_ctors; i++)
    (*i)();
}

extern "C" void kernelMain(const void *multiDoot_structure, uint32_t /*multiboot_magic*/)
{
  printf("Hello World! --- MUHAMMED OGUZ\n");

  GlobalDescriptorTable gdt;

  // ! You can test yield and join from here hocam
  // Thread task1(&gdt, taskA, 0);
  // Thread task2(&gdt, taskB, 1);
  // threadManager.CreateThread(&task1);
  // threadManager.CreateThread(&task2);
  // threadManager.Yield(0);
  // threadManager.Yield(1);
  // threadManager.Join(0);
  // threadManager.Join(1);

  // consumer producer test
  // Thread task1(&gdt, producer, 0);
  // Thread task2(&gdt, consumer, 1);
  // threadManager.CreateThread(&task1);
  // threadManager.CreateThread(&task2);

  InterruptManager interrupts(0x20, &gdt, &threadManager);

#ifdef GRAPHICSMODE
  Desktop desktop(320, 200, 0x00, 0x00, 0xA8);
#endif

  DriverManager drvManager;

#ifdef GRAPHICSMODE
  KeyboardDriver keyboard(&interrupts, &desktop);
#else
  PrintfKeyboardEventHandler kbhandler;
  KeyboardDriver keyboard(&interrupts, &kbhandler);
#endif
  drvManager.AddDriver(&keyboard);

#ifdef GRAPHICSMODE
  MouseDriver mouse(&interrupts, &desktop);
#else
  MouseToConsole mousehandler;
  MouseDriver mouse(&interrupts, &mousehandler);
#endif
  drvManager.AddDriver(&mouse);

  PeripheralComponentInterconnectController PCIController;
  PCIController.SelectDrivers(&drvManager, &interrupts);

  VideoGraphicsArray vga;

  drvManager.ActivateAll();

#ifdef GRAPHICSMODE
  vga.SetMode(320, 200, 8);
  Window win1(&desktop, 10, 10, 20, 20, 0xA8, 0x00, 0x00);
  desktop.AddChild(&win1);
  Window win2(&desktop, 40, 15, 30, 30, 0x00, 0xA8, 0x00);
  desktop.AddChild(&win2);
#endif

  interrupts.Activate();

  printf("1-FIFO\n");
  printf("2-Second Chance\n");
  printf("3-LRU\n");

  while (1)
  {
#ifdef GRAPHICSMODE
    desktop.Draw(&vga);
#endif
  }
}
