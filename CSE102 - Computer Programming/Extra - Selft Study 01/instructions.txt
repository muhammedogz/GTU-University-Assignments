1. Background
 Natural Language Processing NLP - Natural Language Processing

 One of the most important fields today in computer science is the field of natural language processing.  NLP is a broad field that tries to bridge the gap between natural language (which we use on a daily basis) and the computer.  An example of one of the many tasks of NLP is to make the computer "understand" a person's speech (for example Alexa, Siri, Google assistant and the like).  In this exercise we will focus on another topic of NLP, using computer software to generate sentences / tweets (a nickname for messages posted on the Twitter platform) using an existing database.  We will do this with the help of Markov chains and we will expand on how they work later.
 The program we will write will work as follows: 1. We will get Text corpus, a large text repository, which contains many sentences.  2. We will read the corpus and save the words given in it in the dictionary.  Weight is given to each word.  3. We will create sentences probabilistically.  A first word is chosen for the sentence and weights from step 2 are used to grill
 The following words in the sentence.
 The functions) (rand and) (srand
 The computer cannot produce real random value, so programmers use Pseudo-random generator functions.  These functions are given a seed value, which is some initial value (we will use the function) (seedsrand to initialize this value), and with the help of a series of mathematical operations value values ‚Äã‚Äãthat seem to seem random (in any call to
 .) seed will be returned a different value, affected by the rand value ()
 Seed selection: ‚Ä¢ In case no seed is selected, the compiler initializes this value to 1, so if we run the program several times
 In sequence, in each run we will always get the same "random" values.  ‚Ä¢ A common way to get around this problem is to select a seed with the help of the time the program started running.  ‚Ä¢ In our case we will get the seed value as a parameter that the program will get at the beginning of the run.
 
 To get a random number, we use a function (rand that will return an integer between 0 (inclusive) and RAND_MAX (not inclusive). RAND_MAX is a predefined parameter in the library stdlib.h.  Where security is critical, since once we have observed enough values ‚Äã‚Äãit is possible to successfully guess what the next number the function will return is.

2. Parameters and reading a text file

 Your main function will have the following arguments (in the following order): 1. Seed value - a number to be given to the e function (srand - at the beginning of the run (it can be assumed that it is an integer).
 2. The amount of tweets we generate - it can be assumed that the parameter is an integer and is greater than 0.
 3. Path (path) to the text corpus file - Do not assume that the path given is correct.  In case the file does not exist either
 That the program does not have access permissions, an appropriate error message must be printed to stdout - starting with.  EXIT_FAILURE and exit the program with "Error:" error code
 4. The amount of words to be read from the file - in case a fourth parameter has not been obtained, the entire file must be read) It can be assumed that the parameter is an integer and greater than 0, and that the last word you read will always be
 End of sentence).  Do not assume that the amount of words in the text file is greater than or equal to the given parameter, even in this case the entire file should be read.  Example of a standard call to software in Linux:

 tweetsGenerator 454545 30 ‚Äúpath-to-file \ exmaple.txt‚Äù 100

 In case the amount of parameters received does not match the requirements, a message should be printed to stdout - starting with
 .  EXIT_FAILURE and briefly specify the required parameters, and exit the program with an error code "Usage:"
 The following assumptions can be made on the file from which you will read the tweets: 1. The tweets will contain foreign letters in lower-case, numbers, spaces and standard punctuation marks of ASCII only.  2. Any two words will be separated by one or more spaces. 3. The last character in each line will always be the dot character '.') A word ending in a dot may also appear in the middle
 Line (. 4. Each word will not be longer than MAX_WORD_LENGTH characters. 5. Line length will not exceed MAX_SENTNCE_LENGTH characters.
 Note: These two values ‚Äã‚Äãare set for you in the tweetsGenerator.c file.  6. The file must contain at least one sentence containing at least 2 words.
 To read From t     he file we recommend using getsf() and strtok()

3. The structure of the data
 You must use the following data structures that have been partially defined for you in the file: tweetsGenerator.c WordStruct
 Containing: ‚Ä¢ Pointer to the content of the word.  ‚Ä¢ A dynamic WordProbability array that contains all the possible consecutive words according to the text
 The figure.  Note: For a word ending in a period (end of sentence), the WordProbability array will point to NULL.  Note 2: This array is usually small so we will use the following strategy: whenever we want to insert a new word into the array, we will perform, (realloc and increase its size by 1).
 ‚Ä¢ Any additional field you would like to use.  WordProbability
 Containing: ‚Ä¢ Points to the next possible word in a sentence.  ‚Ä¢ A parameter with the help of which it is possible to know / calculate the probability of choosing this word from all the possible words.
 The formula by which the probability of choosing the word is calculated is:
 Pr (word1, word2) = #of occurences of word2 immediately after word1 #of occurences of word1 in text corpus
 When ùë§ùëúùëüùëë2 appears immediately after ùë§ùëúùëüùëë1 in the text.  ‚Ä¢ Any additional field you would like to use.
 WordsDictionary
 A linked list that contains all the unique words in the text.  Note that we treat punctuation as
 Characters in a word, ie the words

hello 
#hello 
hello, 
hello.

They are 4 different words for us, and each one will get a unique WordStruct object for it in the dictionary.  You can use the linked list given to you at the beginning of the tweetsGenerator.c file.
 

 4. Creating a sentence

 - We will choose the first word in the sentence in a uniform distribution (each word has an equal probability of being chosen) from all the words in the dictionary that are not a last word (do not end in a dot).
 - Using the probability function we will select the following words in the sentence.  - We will end when we reach a word that ends a sentence (ends in a full stop), or when the length of the sentence is maximum (number
 The maximum words are set for you as MAX_WORDS_IN_SENTENCE_GENERATION in the file.) TweetsGenerator.c Note: In this case do not add a period at the end of the sentence.
 An example of creating a sentence
 We edited the text, from the words in the dictionary we chose "my" which appears in the text 4 times, followed by: ‚Ä¢ The word "dog" 3 times.  ‚Ä¢ The word ‚Äú.cat‚Äù once.
 So out of these 2 words we will perform a raffle, which will select the next word in the tweet.  Let's say we raffled off the word "dog", this word appeared 10 times in the text (not necessarily immediately after the word "my"), followed by:
 ‚Ä¢ The word ‚Äúis‚Äù twice.  ‚Ä¢ The word ‚Äúwould‚Äù twice.  ‚Ä¢ The word "have" 6 times.
 And so similarly one of these words is chosen one word to be in the tweet.  We will continue in a similar way and finish when we reach a word that is the end of a sentence (for example the word ".cat", which has a last character dot).

 Each vertex can be viewed as a WordStruct instance, and each side as a WordProbability instance.  Each word in the dictionary has a list of probabilities independent of the words that preceded it in the sentence.  A model that operates according to such a probabilistic system is called the "Markov chain".  In this simple case we got a graph without circles, but for a large text file, we may get a graph that does have circles (for example if after the word "is" the text has the word "my").

 5. Additional functions

 In addition to main, you must implement the following functions:

 ‚Ä¢ int get_random_number (int max_number)
 ‚Ä¢ WordStruct * get_first_random_word (LinkList * dictionary)
 ‚Ä¢ WordStruct * get_next_random_word (WordStruct * word_struct_ptr)
 ‚Ä¢ int generate_sentence (LinkList * dictionary)
 ‚Ä¢ int add_word_to_probability_list (WordStruct * first_word, WordStruct * second_word) ‚Ä¢ void fill_dictionary (FILE * fp, int words_to_read, LinkList * dictionary)
 ‚Ä¢ void free_dictionary (LinkList * dictionary)
 The complete documentation for each function can be found in the tweetsGenerator.c file in the model where you need to write the program.  Do not change the signatures of the above functions, but it is allowed to add additional functions for your use. In addition, the justdoit-tweets.txt file is attached, which contains around 4400 tweets and with its help you can check your plan.  And we missed something, we apologize for that in advance.

6. Emphasis and guidelines for the exercise

 ‚Ä¢ At the end of the run you must release all the resources you used, your plan will be checked by valgrind and points will be dropped in case of memory leaks.
 ‚Ä¢ In case of memory allocation error caused by (malloc () / realloc () / calloc, an error message corresponding to stdout must be printed - starting with
 ‚ÄúAllocation failure:‚Äù
 And exit program using EXIT_FAILURE error code.  This is the only case where there is no need to free up memory
 At the end of the program run.
 ‚Ä¢ Note that your choice of words for the sentence is really made according to the distribution defined in the exercise and that it is indeed
 Random.
 ‚Ä¢ If possible, always prefer to work with int / long than float / double.  The whole exercise can be solved 5
 Using integers only.  ‚Ä¢ Each sentence will be printed in a line on its own, you only need to add the text at the beginning of the line (note the space
 After the parentheses):
 Tweet {iteration number}: generated sentence
 For example, the sixth line that your exercise will print would look like this:
 Tweet 6: hello, nice to meet you.
 ) Of course your sentence will look different).
 ‚Ä¢ Do not use vla - such use will result in lowering a grade from an exercise.  ‚Ä¢ To compile the program you can use the following command:
 gcc  tweetsGenerator.c -o tweetsGenerator -Wall -Wextra -Wvla -std = c99
gcc tweetsGenerator.c -o tweetsGenerator -Wall -Wextra -Wvla -std=c99

